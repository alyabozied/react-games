{"version":3,"sources":["index.js"],"names":["Square","props","font","value","className","place","color","onClick","updateBoard","Row","values","Board","printWinner","useState","player","setPlayer","Array","fill","board","setBoard","winner","setWinner","currentState","slice","i","console","log","checkWinner","ReactDOM","render","document","getElementById"],"mappings":"uMAGA,SAASA,EAAOC,GACd,IAAIC,EAGJ,MAFoB,MAAhBD,EAAME,QAAeD,EAAO,OACZ,MAAhBD,EAAME,QAAeD,EAAO,QAE9B,4BACEE,UAAU,SACVC,MAAOJ,EAAMI,MACbC,MAAOJ,EACPK,QACE,WACEN,EAAMO,YAAYP,EAAMI,SAK3BJ,EAAME,OAIb,SAASM,EAAIR,GACX,OACE,yBAAKG,UAAU,OACb,kBAACJ,EAAD,CACEQ,YAAaP,EAAMO,YACnBH,MAAOJ,EAAMI,MAAM,GACnBF,MAAOF,EAAMS,OAAO,KAEtB,kBAACV,EAAD,CACEQ,YAAaP,EAAMO,YACnBH,MAAOJ,EAAMI,MAAM,GACnBF,MAAOF,EAAMS,OAAO,KAEtB,kBAACV,EAAD,CACEQ,YAAaP,EAAMO,YACnBH,MAAOJ,EAAMI,MAAM,GACnBF,MAAOF,EAAMS,OAAO,MAK5B,SAASC,IAAS,IAqDZC,EArDW,EACaC,mBAAS,KADtB,mBACRC,EADQ,KACAC,EADA,OAEWF,mBAASG,MAAM,GAAGC,KAAK,MAFlC,mBAERC,EAFQ,KAEDC,EAFC,OAGaN,mBAAS,KAHtB,mBAGRO,EAHQ,KAGAC,EAHA,KAIf,SAASb,EAAYH,GACnB,IAAIiB,EAAeJ,EAAMK,QACE,KAAvBD,EAAajB,IAA2B,KAAVe,IAClCE,EAAajB,GAASS,EACtBK,EAASG,GACQP,EAAN,MAAXD,EAA2B,IAAiB,KAG9C,SAAqBI,GAEnB,IAAK,IAAIM,EAAI,EAAGA,EAAI,EAAGA,GAAK,EAC1BC,QAAQC,MAENR,EAAMM,KAAON,EAAMM,EAAI,IACvBN,EAAMM,KAAON,EAAMM,EAAI,IACT,MAAbN,EAAMM,IAA2B,MAAbN,EAAMM,KAE3BH,EAAUH,EAAMM,IAChBC,QAAQC,IAAIR,EAAMM,KAItB,IAAK,IAAIA,EAAI,EAAGA,EAAI,EAAGA,IAEnBN,EAAMM,KAAON,EAAMM,EAAI,IACvBN,EAAMM,KAAON,EAAMM,EAAI,IACT,MAAbN,EAAMM,IAA2B,MAAbN,EAAMM,IAE3BH,EAAUH,EAAMM,IAIlBN,EAAM,KAAOA,EAAM,IACnBA,EAAM,KAAOA,EAAM,IACL,MAAbA,EAAM,IAA2B,MAAbA,EAAM,IAE3BG,EAAUH,EAAM,IAEhBA,EAAM,KAAOA,EAAM,IACnBA,EAAM,KAAOA,EAAM,IACL,MAAbA,EAAM,IAA2B,MAAbA,EAAM,IAE3BG,EAAUH,EAAM,IApClBS,CAAYL,IA0Dd,MAde,MAAXF,IACFR,EACE,6BACE,uCAAaQ,EAAb,QACA,4BACEb,QAAS,WAVfc,EAAU,KACVN,EAAU,KACVI,EAASH,MAAM,GAAGC,KAAK,QAOnB,WAWJ,6BACE,6BACE,sCAAYH,EAAZ,WAEF,kBAACL,EAAD,CACED,YAAaA,EACbH,MAAO,CAAC,EAAG,EAAG,GACdK,OAAQQ,EAAMK,MAAM,EAAG,KAEzB,kBAACd,EAAD,CACED,YAAaA,EACbH,MAAO,CAAC,EAAG,EAAG,GACdK,OAAQQ,EAAMK,MAAM,EAAG,KAEzB,kBAACd,EAAD,CACED,YAAaA,EACbH,MAAO,CAAC,EAAG,EAAG,GACdK,OAAQQ,EAAMK,MAAM,EAAG,KAGzB,6BAAMX,IAaZgB,IAASC,OAAO,mBARhB,WACE,OACE,6BACE,kBAAClB,EAAD,SAKU,MAAUmB,SAASC,eAAe,W","file":"static/js/main.30a07a42.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nfunction Square(props) {\n  let font;\n  if (props.value === \"X\") font = \"red\";\n  if (props.value === \"O\") font = \"blue\";\n  return (\n    <button\n      className=\"square\"\n      place={props.place}\n      color={font}\n      onClick={\n        () => {\n          props.updateBoard(props.place);\n        }\n        //  props.updateBoard(props.place)\n      }\n    >\n      {props.value}\n    </button>\n  );\n}\nfunction Row(props) {\n  return (\n    <div className=\"row\">\n      <Square\n        updateBoard={props.updateBoard}\n        place={props.place[0]}\n        value={props.values[0]}\n      />\n      <Square\n        updateBoard={props.updateBoard}\n        place={props.place[1]}\n        value={props.values[1]}\n      />\n      <Square\n        updateBoard={props.updateBoard}\n        place={props.place[2]}\n        value={props.values[2]}\n      />\n    </div>\n  );\n}\nfunction Board() {\n  const [player, setPlayer] = useState(\"X\");\n  const [board, setBoard] = useState(Array(9).fill(\" \"));\n  const [winner, setWinner] = useState(\" \");\n  function updateBoard(place) {\n    let currentState = board.slice();\n    if (currentState[place] != \" \" || winner != \" \") return;\n    currentState[place] = player;\n    setBoard(currentState);\n    player === \"X\" ? setPlayer(\"O\") : setPlayer(\"X\");\n    checkWinner(currentState);\n  }\n  function checkWinner(board) {\n    //rows\n    for (let i = 0; i < 9; i += 3) {\n      console.log();\n      if (\n        board[i] === board[i + 1] &&\n        board[i] === board[i + 2] &&\n        (board[i] === \"X\" || board[i] === \"O\")\n      ) {\n        setWinner(board[i]);\n        console.log(board[i]);\n      }\n    }\n    //coloumns\n    for (let i = 0; i < 3; i++) {\n      if (\n        board[i] === board[i + 3] &&\n        board[i] === board[i + 6] &&\n        (board[i] === \"X\" || board[i] === \"O\")\n      )\n        setWinner(board[i]);\n    }\n    //diagonals\n    if (\n      board[0] === board[4] &&\n      board[0] === board[8] &&\n      (board[0] === \"X\" || board[0] === \"O\")\n    )\n      setWinner(board[0]);\n    if (\n      board[2] === board[4] &&\n      board[2] === board[6] &&\n      (board[2] === \"X\" || board[2] === \"O\")\n    )\n      setWinner(board[2]);\n  }\n  function clear() {\n    setWinner(\" \");\n    setPlayer(\"X\");\n    setBoard(Array(9).fill(\" \"));\n  }\n  let printWinner;\n  if (winner !== \" \") {\n    printWinner = (\n      <div>\n        <div>player {winner} won</div>\n        <button\n          onClick={() => {\n            clear();\n          }}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <div>\n        <h1>player {player} turn </h1>\n      </div>\n      <Row\n        updateBoard={updateBoard}\n        place={[0, 1, 2]}\n        values={board.slice(0, 3)}\n      />\n      <Row\n        updateBoard={updateBoard}\n        place={[3, 4, 5]}\n        values={board.slice(3, 6)}\n      />\n      <Row\n        updateBoard={updateBoard}\n        place={[6, 7, 8]}\n        values={board.slice(6, 9)}\n      />\n\n      <div>{printWinner}</div>\n    </div>\n  );\n}\n\nfunction Game() {\n  return (\n    <div>\n      <Board />\n    </div>\n  );\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}